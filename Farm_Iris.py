__version__ = (0, 0, 2)

# for more info: https://murix.ru/files/ftg
# by xadjilut, 2021

# –º–æ–¥—É–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ –º–æ–π | This module is not half mine.

# _           _            _ _
# | |         | |          (_) |
# | |     _ | |_ _  _ _| | 
# | |    / _ \| / _ \/ | | |/ /
# | |_| (_) | || (_) \ \ |   <
# \_/\_/ \\_/|_/_|_|\_\
#
#              ¬© Copyright 2022
#
#         developed by @lotosiiik, @byateblan

# meta developer: @hikkaftgmods
# modify by: @caesar_do_not_touch
# meta banner: https://te.legra.ph/file/a428776824470e0bdccb6.jpg
# meta pic: https://te.legra.ph/file/98192f1f7953275baead5.jpg

import random
from .. import loader, utils
from datetime import timedelta, datetime
from telethon import functions
from telethon.tl.types import Message

@loader.tds
class FarmIrisMod(loader.Module):
    """–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∫–æ–∏–Ω–æ–≤ –≤ –∏—Ä–∏—Å–±–æ—Ç–µ"""

    strings = {
        "name": "farmiris",
        "farmon": "<i>‚úÖ–û—Ç–ª–æ–∂–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...</i>",
        "farmon_already": "<i>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</i>",
        "farmoff": "<i>‚ùå–ê–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n‚ò¢Ô∏è–ù–∞–¥—é–ø–∞–Ω–æ:</i> <b>%coins% i¬¢</b>",
        "farm": "<i>‚ò¢Ô∏è–ù–∞–¥—é–ø–∞–Ω–æ:</i> <b>%coins% i¬¢</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.myid = (await client.get_me()).id
        self.iris = 5443619563

    async def farmoncmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥"""
        status = self.db.get(self.name, "status", False)
        if status:
            message = await utils.answer(message, self.strings["farmon_already"])
            return
        self.db.set(self.name, "status", True)
        peer = await self.client.get_input_entity(self.iris)
        await self.client.send_message(
            peer, "–§–∞—Ä–º–∞", schedule=datetime.now() + timedelta(seconds=20)
        )
        message = await utils.answer(message, self.strings["farmon"])

    async def farmoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥"""
        self.db.set(self.name, "status", False)
        coins = self.db.get(self.name, "coins", 0)
        if coins:
            self.db.set(self.name, "coins", 0)
        message = await utils.answer(message, self.strings["farmoff"].replace("%coins%", str(coins)))

    async def farmcmd(self, message):
        """–í—ã–≤–æ–¥ –∫–æ–ª-–≤–∞ –∫–æ–∏–Ω–æ–≤, –¥–æ–±—ã—Ç—ã—Ö —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º"""
        coins = self.db.get(self.name, "coins", 0)
        message = await utils.answer(message, self.strings["farm"].replace("%coins%", str(coins)))

    async def watcher(self, event):
        if not isinstance(event, Message):
            return
        chat = utils.get_chat_id(event)
        if chat != self.iris:
            return
        status = self.db.get(self.name, "status", False)
        if not status:
            return
        peer = await self.client.get_input_entity(self.iris)

        if event.raw_text == "–§–∞—Ä–º–∞":
            await self.client.send_message("me", "‚ñ∂Ô∏è –§–∞—Ä–º–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            return await self.client.send_message(
                peer, "–§–∞—Ä–º–∞", schedule=datetime.now() + timedelta(minutes=random.randint(1, 20))
            )

        if event.sender_id != self.iris:
            return

        if "–ù–ï–ó–ê–ß–Å–¢!" in event.raw_text:
            await self.client.send_message("me", f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ù–ï–ó–ê–ß–Å–¢! –¢–µ–∫—Å—Ç: {event.raw_text}")
            args = [int(x) for x in event.raw_text.split() if x.isnumeric()]
            randelta = random.randint(20, 60)
            try:
                if len(args) == 4:
                    delta = timedelta(hours=args[1], minutes=args[2], seconds=args[3] + randelta)
                elif len(args) == 3:
                    delta = timedelta(minutes=args[1], seconds=args[2] + randelta)
                elif len(args) == 2:
                    delta = timedelta(seconds=args[1] + randelta)
                else:
                    await self.client.send_message("me", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
                    return
            except Exception as e:
                await self.client.send_message("me", f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                return

            schedule_time = datetime.now() + delta

            try:
                sch = (await self.client(functions.messages.GetScheduledHistoryRequest(peer=peer, hash=0))).messages
                await self.client.send_message("me", f"üóë –ù–∞–π–¥–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(sch)}")
                if sch:
                    await self.client(
                        functions.messages.DeleteScheduledMessagesRequest(peer=peer, id=[x.id for x in sch])
                    )
            except Exception as e:
                await self.client.send_message("me", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–∫: {e}")

            await self.client.send_message("me", f"üìÜ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–∞—Ä–º—É —á–µ—Ä–µ–∑: {delta}")
            return await self.client.send_message(peer, "–§–∞—Ä–º–∞", schedule=schedule_time)

        if "–ó–ê–ß–Å–¢" in event.raw_text or "–£–î–ê–ß–ê" in event.raw_text:
            args = event.raw_text.split()
            for x in args:
                if x[0] == "+":
                    coins = int(x[1:])
                    total = self.db.get(self.name, "coins", 0) + coins
                    self.db.set(self.name, "coins", total)
                    await self.client.send_message("me", f"üí∞ –ó–∞—á—ë—Ç! –î–æ–±–∞–≤–ª–µ–Ω–æ: {coins} i¬¢ | –í—Å–µ–≥–æ: {total} i¬¢")
                    return

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            response = await conv.get_response()
            if mark_read:
                await conv.mark_read()

            if delete:
                await msg.delete()
                await response.delete()

            return response

    @loader.command()
    async def bagcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –º–µ—à–æ–∫"""

        bot = "@iris_black_bot"
        bags = await self.message_q(
            "–ú–µ—à–æ–∫",
            bot,
            delete=True,
        )

        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, bags.text)
